# .bashrc

export NVM_DIR="${NVM_DIR:-/usr/local/share/nvm}"

# Load user specific nvm configuration
if [ -s "$HOME/.nvm/nvm.sh" ]; then
  export NVM_DIR="$HOME/.nvm"

  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
fi

[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

# Auto use nvm version based on .nvmrc file
cdnvm() {
    command cd "$@" || return $?
    nvm_path="$(nvm_find_up .nvmrc | command tr -d '\n')"

    # Check if this is an interactive shell
    case $- in
        *i*) interactive=1 ;;
        *) interactive=0 ;;
    esac

    # If there are no .nvmrc file, use the default nvm version
    if [ -z "$(echo "$nvm_path" | tr -d '[:space:]')" ]; then

        default_version="$(nvm version default)"

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [ "$default_version" = 'N/A' ]; then
            if [ "$interactive" = "1" ]; then
                nvm alias default node
            else
                nvm alias default node >/dev/null 2>&1
            fi
            default_version=$(nvm version default)
        fi

        # If the current version is not the default version, set it to use the default version
        if [ "$(nvm current)" != "${default_version}" ]; then
            if [ "$interactive" = "1" ]; then
                nvm use default
            else
                nvm use default >/dev/null 2>&1
            fi
        fi
    elif [ -s "${nvm_path}/.nvmrc" ] && [ -r "${nvm_path}/.nvmrc" ]; then
        nvm_version=$(cat "${nvm_path}/.nvmrc")

        # `nvm ls` will check all locally-available versions
        # If there are multiple matching versions, take the latest one
        # Remove the `->` and `*` characters and spaces
        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
        locally_resolved_nvm_version=$(nvm ls --no-colors "${nvm_version}" | command tail -1 | command tr -d '\->*' | command tr -d '[:space:]')

        # If it is not already installed, install it
        # `nvm install` will implicitly use the newly-installed version
        if [ "${locally_resolved_nvm_version}" = 'N/A' ]; then
            if [ "$interactive" = "1" ]; then
                nvm install "${nvm_version}";
            else
                nvm install "${nvm_version}" >/dev/null 2>&1;
            fi
        elif [ "$(nvm current)" != "${locally_resolved_nvm_version}" ]; then
            if [ "$interactive" = "1" ]; then
                nvm use "${nvm_version}";
            else
                nvm use "${nvm_version}" >/dev/null 2>&1;
            fi
        fi
    fi
}

# Check if nvm command exists and alias cd to cdnvm
if command -v nvm >/dev/null 2>&1; then
	alias cd='cdnvm'
	cdnvm "$PWD" || true
fi
