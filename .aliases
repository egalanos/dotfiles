# .bashrc

alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias la='ls -Al --color=auto'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# pnpm
alias pn='pnpm'
alias pd='pnpm dev'
alias pb='pnpm build'
alias pt='pnpm test'
alias pi='pnpm install'
alias pa='pnpm add'
alias pad='pnpm add -D'

# git
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gcm='git commit -m'
alias gp='git push'

gnb() {
  if [ $# -ne 1 ]; then
    echo "Usage: fix <branch-suffix>"
    return 1
  fi

  git rev-parse --is-inside-work-tree > /dev/null 2>&1 || {
    echo "‚ùå Not inside a git repository."
    return 1
  }

  branch_suffix="$1"
  new_branch="egalanos/$branch_suffix"

  # Auto-detect default branch
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')

  current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$current_branch" != "$default_branch" ]; then
    echo "‚ùå You must be on the '$default_branch' branch to run this. (Currently on '$current_branch')"
    return 1
  fi

  echo "üîÑ Pulling latest changes from '$default_branch'..."
  git pull || return 1

  echo "üå± Creating and switching to branch '$new_branch'..."
  git checkout -b "$new_branch" || return 1

  # Uncomment the line below if you always want to push right after creating
  # git push -u origin "$new_branch"
}

git-delete-merged-remote-branches() {
  git fetch --prune

  local branches_to_delete=$(git branch -vv | grep ': gone]' | grep -v "\*\|main\|master" | awk '{print $1}')
  
  if [[ -z "$branches_to_delete" ]]; then
    echo "No branches to delete."
    return 0
  fi
  
  echo "The following local branches have been merged and deleted on remote:"
  echo "$branches_to_delete"
  
  echo -n "Do you want to delete these branches? (y/N): "
  read -r response
  
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Deleting branches..."
    echo "$branches_to_delete" | xargs git branch -d
    
    # Check if any branches failed to delete
    local failed_branches=$(git branch -vv | grep ': gone]' | grep -v "\*\|main\|master" | awk '{print $1}')
    if [[ -n "$failed_branches" ]]; then
      echo "Some branches could not be deleted (they may have unmerged changes):"
      echo "$failed_branches"
      echo -n "Do you want to force delete these branches? (y/N): "
      read -r force_response
      
      if [[ "$force_response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo "Force deleting remaining branches..."
        echo "$failed_branches" | xargs git branch -D
      else
        echo "Skipped force deletion."
      fi
    fi
  else
    echo "Operation cancelled."
  fi
}
